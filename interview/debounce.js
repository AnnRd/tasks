// код https://codepen.io/puzankov/pen/JjYmeqV

const debounce = (fn, ms) => {
    let timeout;
    return function () {
      const fnCall = () => { fn.apply(this, arguments) }
      clearTimeout(timeout);
      timeout = setTimeout(fnCall, ms)
    };
  }
  
  function onChange(e) {
    console.log(e.target.value);
  }
  
  const debOnChange = debounce(onChange, 200);
  
  document.getElementById('search').addEventListener('keyup', debOnChange);

  //html 
//   <form autocomplete="off" onsubmit="event.preventDefault();" role="search">
//   <label for="search">Search</label>
//   <input id="search" type="search" placeholder="Search..." autofocus required autocomplete="off"/>
//   <button type="submit">Go</button>
//   </form>

//Что это вообще такое?
// Троттлинг функции означает, что функция вызывается не более одного раза в указанный период времени (например, раз в 10 секунд). Другими словами ― троттлинг предотвращает запуск функции, если она уже запускалась недавно. Троттлинг также обеспечивает регулярность выполнение функции с заданной периодичностью.

// Debouncing функции означает, что все вызовы будут игнорироваться до тех пор, пока они не прекратятся на определённый период времени. Только после этого функция будет вызвана. Например, если мы установим таймер на 2 секунды, а функция вызывается 10 раз с интервалом в одну секунду, то фактический вызов произойдёт только спустя 2 секунды после крайнего (десятого) обращения к функции.

// Можно провести такую аналогию:

// Предположим, вы работаете за компьютером и в то же время чатитесь с другом в мессенджере, который отправляет вам сообщение за сообщением. Вы получаете пуш уведомления каждую минуту. В обычном случае вы бы прочитывали эти сообщения сразу, но сейчас вы заняты и не можете так часто отвлекаться. Как можно поступить?

// Игнорировать уведомления, и прочитывать принятые сообщения раз в пять минут.
// Игнорировать уведомления. Если в течение последних пяти минут не поступало новых уведомлений, предположим, что друг закончил свою историю и тогда проверить принятые сообщения.
// Первый вариант можно сравнить с throttling, а второй с debouncing.